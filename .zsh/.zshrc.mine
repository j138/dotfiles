# j138 .zshrc.mine

case ${OSTYPE} in
  darwin*)
  # z command
  if [[ -s ~/tmp/.z ]] then
    export _Z_DATA=~/tmp/.z
    . `brew --prefix`/etc/profile.d/z.sh
    alias j='z'
  fi

  # # notify.plugin.zsh
  # source $HOME/Documents/Github/zsh-notify/notify.plugin.zsh
  # export SYS_NOTIFIER="/usr/local/bin/terminal-notifier"
  # export NOTIFY_COMMAND_COMPLETE_TIMEOUT=20


  # boot2docker
  export DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2376
  export DOCKER_CERT_PATH=/Users/t00114/.boot2docker/certs/boot2docker-vm
  export DOCKER_TLS_VERIFY=1


  # docker
  if [[ -s /usr/local/bin/boot2docker ]] then
    docker-enter() {
      boot2docker ssh '[ -f /var/lib/boot2docker/nsenter ] || docker run --rm -v /var/lib/boot2docker/:/target jpetazzo/nsenter'
      boot2docker ssh -t sudo /var/lib/boot2docker/docker-enter "$@"
    }
  fi
  alias de="docker-enter \$(docker ps -q)"


  # powerline-client
  _powerline_tmux_setenv() {
    if [[ -n "$TMUX" ]]; then
      tmux setenv TMUX_"$1"_$(tmux display -p "#D" | tr -d %) "$2"
    fi
  }

  _powerline_tmux_set_pwd() {
    _powerline_tmux_setenv PWD "$PWD"
  }

  _powerline_tmux_set_columns() {
    _powerline_tmux_setenv COLUMNS "$COLUMNS"
  }

  _powerline_prompt() {
    [[ -z "$POWERLINE_OLD_PROMPT_COMMAND" ]] ||
      eval $POWERLINE_OLD_PROMPT_COMMAND
    PS1="$(powerline-client shell left -r zsh_prompt --last_exit_code=$?)"
    _powerline_tmux_set_pwd
  }

  trap "_powerline_tmux_set_columns" SIGWINCH
  _powerline_tmux_set_columns

  [[ "$PROMPT_COMMAND" == "_powerline_prompt" ]] ||
    POWERLINE_OLD_PROMPT_COMMAND="$PROMPT_COMMAND"
  export PROMPT_COMMAND="_powerlineÂ¥_prompt"
  ;;
  linux*)
    [[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && source ~/.autojump/etc/profile.d/autojump.sh
    autoload -U compinit && compinit -u
  ;;
esac


# alias
if command -v colordiff>/dev/null; then
  alias diff="colordiff"
fi


# tmux-powerline
PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

# vim: set syntax=zsh:
