[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
  nnoremap [denite] <Nop>
  nmap <C-u> [denite]

  nnoremap [denite]b :Denite buffer<CR>
  nnoremap [denite]f :Denite file_rec<CR>
  nnoremap [denite]m :Denite file_old<CR>
  nnoremap [denite]y :Denite neoyank<CR>

  nnoremap [denite]B :<C-u>tabnew<CR>:tabmove<CR>:Denite buffer<CR>
  nnoremap [denite]M :<C-u>tabnew<CR>:tabmove<CR>:Denite file_old<CR>

  " grepした結果を再表示し、次/前へ
  nnoremap <silent> [denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
  nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
'''
hook_post_source = '''
  call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['denite.nvim']
hook_add = '''
  noremap <Leader>o <ESC>:Denite outline<Return>
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/tabpagebuffer.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

  let g:quickrun_config = {
    \ '_': {
    \   'runner': 'vimproc',
    \   'runner/vimproc/sleep': 10,
    \   'runner/vimproc/updatetime': 500,
    \   'outputter/buffer/split': ':botright 8sp',
    \   'outputter/buffer/close_on_empty': 1,
    \   'hook/echo/enable' : 0,
    \   'hook/echo/output_success': '> No Errors Found.',
    \   'hook/back_window/enable' : 1,
    \   'hook/back_window/enable_exit': 1,
    \   'hock/close_buffer/enable_hock_loaded': 1,
    \   'hock/close_buffer/enable_success': 1,
    \   'hook/qfstatusline_update/enable_exit': 1,
    \   'hook/qfstatusline_update/priority_exit': 4,
    \ },
    \ 'watchdogs_checker/_': {
    \   'hook/qfstatusline_update/enable_exit': 1,
    \   'hook/qfstatusline_update/priority_exit': 1,
    \ },
    \ 'javascript/watchdogs_checker': {
    \   'type': 'watchdogs_checker/eslint',
    \ },
    \ 'ruby/watchdogs_checker': {
    \   'type': 'watchdogs_checker/rubocop',
    \   'cmdopt': '-D'
    \ },
    \ 'php/watchdogs_checker': {
    \   'type': 'watchdogs_checker/php',
    \ },
    \ 'haml/watchdogs_checker': {
    \   'type': 'watchdogs_checker/haml-lint',
    \ },
    \ 'sass/watchdogs_checker': {
    \   'type': 'watchdogs_checker/sass',
    \ },
    \ 'stylelint/watchdogs_checker': {
    \   'type': 'watchdogs_checker/stylelint',
    \ },
    \ 'sh/watchdogs_checker': {
    \   'type': 'watchdogs_checker/shellcheck',
    \   'cmdopt': '-f gcc -s bash'
    \ },
    \}
'''

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['vim-quickrun']
hook_add = '''
  let g:watchdogs_check_BufWritePost_enable = 1
  let g:watchdogs_check_CursorHold_enable = 1
  call watchdogs#setup(g:quickrun_config)

  nnoremap <Leader>w :let g:watchdogs_check_BufWritePost_enable = 0<CR>
  nnoremap <Leader>W :let g:watchdogs_check_BufWritePost_enable = 1<CR>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ 'active': {
  \   'left': [[ 'mode', 'paste' ], [ 'fugitive', 'readonly', 'filename', 'modified', 'qfstatusline']],
  \ },
  \ 'component': {
  \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
  \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
  \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
  \ },
  \ 'component_visible_condition': {
  \   'readonly': '(&filetype!="help"&& &readonly)',
  \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
  \ },
  \ 'component_expand': {'qfstatusline': 'qfstatusline#Update'},
  \ 'component_type':   {'qfstatusline': 'error'},
  \ 'separator': { 'left': '⮀', 'right': '⮂' },
  \ 'subseparator': { 'left': '⮁', 'right': '⮃' },
  \ }
  let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''

[[plugins]]
repo = 'vim-scripts/jellybeans.vim'
hook_add = '''
  au MyAutoCmd VimEnter * nested colorscheme jellybeans
'''

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  colorscheme jellybeans
  au VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=red ctermbg=3
  au VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
  " au FileType coffee,javascript,python IndentGuidesEnable
  au FileType coffee,ruby,javascript,python IndentGuidesEnable
  nmap <silent><Leader>sg <Plug>IndentGuidesToggle

  let g:indent_guides_auto_colors=0
  let g:indent_guides_start_level=2
  let g:indent_guides_guide_size=1
  let g:indent_guides_enable_on_vim_startup=0
  let g:indent_guides_color_change_percent=20
'''

[[plugins]]
repo = 'kien/rainbow_parentheses.vim'
hook_add = '''
  let g:rbpt_max = 16
  let g:rbpt_loadcmd_toggle = 0
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tomtom/tcomment_vim.git'

[[plugins]]
repo = 'h1mesuke/vim-alignta.git'
hook_add = '''
  vnoremap <silent> => :Align @1 =><CR>
  vnoremap <silent> == :Align @1 =<CR>
'''

[[plugins]]
repo = 'nishigori/increment-activator'
hook_add = '''
  let g:increment_activator_filetype_candidates = {
  \   '_': [
  \     ['info', 'warning', 'notice', 'error', 'success'],
  \     ['mini', 'small', 'medium', 'large', 'xlarge', 'xxlarge'],
  \     ['static', 'absolute', 'relative', 'fixed', 'sticky'],
  \     ['height', 'width'],
  \     ['right', 'left'],
  \     ['enable', 'disable'],
  \     ['enabled', 'disabled'],
  \     ['should', 'should_not'],
  \     ['be_file', 'be_directory'],
  \     ['div', 'span'],
  \   ],
  \   'ruby': [
  \     ['if', 'unless'],
  \     ['nil', 'empty', 'blank'],
  \     ['string', 'text', 'integer', 'float', 'datetime', 'timestamp', 'timestamp'],
  \   ],
  \   'javascript': [
  \     ['const', 'let'],
  \   ],
  \   'javascript.jsx': [
  \     ['const', 'let'],
  \   ],
  \   'git-rebase-todo': [
  \     ['pick', 'reword', 'edit', 'squash', 'fixup', 'exec'],
  \   ],
  \ }
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'
on_cmd = ['SudoWrite', 'SudoRead']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap [fugitive] <Nop>
  nmap <C-g> [fugitive]
  nnoremap [fugitive]b :<C-u>Gblame<CR>
  nnoremap [fugitive]d :<C-u>Gdiff<CR>
  nnoremap [fugitive]g :<C-u>Ggrep<Space>
  nnoremap [fugitive]s :<C-u>Gstatus<CR>
  nnoremap [fugitive]w :<C-u>Gwrite<CR>
  nnoremap [fugitive]c :<C-u>Gcommit<CR>
'''

[[plugins]]
repo = 'alpaca-tc/alpaca_tags'
hook_add = '''
  let g:alpaca_tags#config = {
  \  '_': '-R --sort=yes',
  \  'ruby': '--languages=+Ruby',
  \  'javascript': '--languages=+Javascript',
  \}

  augroup AlpacaTags
    autocmd!
    if exists(':AlpacaTags')
      autocmd BufWritePost Gemfile AlpacaTagsBundle
      autocmd BufEnter * AlpacaTagsSet
      autocmd BufWritePost * AlpacaTagsUpdate
    endif
  augroup END
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tpope/vim-abolish'
depends = ['vim-repeat']

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
 repo = 'editorconfig/editorconfig-vim'
