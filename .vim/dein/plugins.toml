[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
          \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> e
          \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
          \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
          \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> <ESC>
          \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> q
          \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
          \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
          \ denite#do_map('toggle_select').'j'
  endfunction

  nnoremap [denite] <Nop>
  nmap <C-u> [denite]

  nnoremap <Leader>b :Denite buffer<CR>
  nnoremap <Leader>f :Denite file/rec<CR>
  nnoremap <Leader>m :Denite file/old<CR>
  nnoremap <Leader>y :Denite neoyank<CR>

   " grep
   call denite#custom#var('grep', 'command', ['ag'])
   call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
   call denite#custom#var('grep', 'recursive_opts', [])
   call denite#custom#var('grep', 'pattern_opt', [])
   call denite#custom#var('grep', 'separator', ['--'])
   call denite#custom#var('grep', 'final_opts', [])

  " grepした結果を再表示し、次/前へ
  nnoremap <silent> <Leader>g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> <Leader>G :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> <Leader>n :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
  nnoremap <silent> <Leader>p :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>

  let s:ignore_globs = ['.git', '.svn', 'node_modules']
  call denite#custom#var('file/rec', 'command', [
      \ 'ag',
      \ '--follow',
      \ ] + map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v }) + [
      \ '--nocolor',
      \ '--nogroup',
      \ '-g',
      \ ''
      \ ])
  call denite#custom#source('file/rec', 'matchers', ['matcher/substring'])
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['denite.nvim']
hook_add = '''
  noremap <Leader>o <ESC>:Denite outline<Return>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/tabpagebuffer.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'w0rp/ale.git'
on_source = ['lightline.vim']
hook_add = '''
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '']
  let g:ale_echo_msg_format = '[%linter%] %s'
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \ '_': {
  \   'runner': 'vimproc',
  \   'runner/vimproc/sleep': 10,
  \   'runner/vimproc/updatetime': 500,
  \   'outputter/buffer/split': ':botright 8sp',
  \   'outputter/buffer/close_on_empty': 1,
  \   'hook/echo/enable' : 0,
  \   'hook/echo/output_success': '> No Errors Found.',
  \   'hook/back_window/enable' : 1,
  \   'hook/back_window/enable_exit': 1,
  \   'hock/close_buffer/enable_hock_loaded': 1,
  \   'hock/close_buffer/enable_success': 1,
  \   'hook/qfstatusline_update/enable_exit': 1,
  \   'hook/qfstatusline_update/priority_exit': 4,
  \ },
  \}
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'fugitive', 'readonly', 'filename', 'modified', 'qfstatusline'],
  \     [ 'ale' ],
  \   ],
  \ },
  \ 'component': {
  \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
  \ },
  \'component_function': {
  \   'ale': 'LLAle',
  \ },
  \ 'component_visible_condition': {
  \   'readonly': '(&filetype!="help"&& &readonly)',
  \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())',
  \ },
  \ 'component_expand': {'qfstatusline': 'qfstatusline#Update'},
  \ 'component_type':   {'qfstatusline': 'error'},
  \}
  function! LLAle()
    let l:count = ale#statusline#Count(bufnr(''))
    let l:errors = l:count.error + l:count.style_error
    let l:warnings = l:count.warning + l:count.style_warning
    return l:count.total == 0 ? '' : 'E:' . l:errors . ' W:' . l:warnings
  endfunction
  let g:Qfstatusline#UpdateCmd = function('lightline#update')
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  map <Leader>e :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  " au MyAutoCmd VimEnter * nested colorscheme iceberg
  " au MyAutoCmd VimEnter * highlight Visual ctermbg=216
'''

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  au MyAutoCmd VimEnter * nested colorscheme onedark
  colorscheme onedark
'''

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
depends = ['onedark.vim']
hook_add = '''
  colorscheme onedark
  au VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=red ctermbg=3
  au VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
  au FileType coffee,ruby,javascript,python IndentGuidesEnable
  nmap <silent><Leader>sg <Plug>IndentGuidesToggle

  let g:indent_guides_auto_colors=0
  let g:indent_guides_start_level=2
  let g:indent_guides_guide_size=1
  let g:indent_guides_enable_on_vim_startup=0
  let g:indent_guides_color_change_percent=20
'''

[[plugins]]
repo = 'kien/rainbow_parentheses.vim'
hook_add = '''
  let g:rbpt_max = 16
  let g:rbpt_loadcmd_toggle = 0
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'tomtom/tcomment_vim.git'

[[plugins]]
repo = 'h1mesuke/vim-alignta.git'
hook_add = '''
  vnoremap <silent> => :Align @1 =><CR>
  vnoremap <silent> == :Align @1 =<CR>
'''

[[plugins]]
repo = 'nishigori/increment-activator'
hook_add = '''
  let g:increment_activator_filetype_candidates = {
  \ '_': [
  \   ['info', 'warning', 'notice', 'error', 'success'],
  \   ['mini', 'small', 'medium', 'large', 'xlarge', 'xxlarge'],
  \   ['static', 'absolute', 'relative', 'fixed', 'sticky'],
  \   ['height', 'width'],
  \   ['left', 'right', 'top', 'bottom'],
  \   ['enable', 'disable'],
  \   ['enabled', 'disabled'],
  \   ['should', 'should_not'],
  \   ['be_file', 'be_directory'],
  \   ['div', 'span'],
  \   ['column', 'row'],
  \   ['start', 'end'],
  \   ['head', 'tail'],
  \   ['get', 'post'],
  \   ['margin', 'padding'],
  \   ['primary', 'secondary', 'tertiary'],
  \ ],
  \ 'ruby': [
  \   ['if', 'unless'],
  \   ['nil', 'empty', 'blank'],
  \   ['string', 'text', 'integer', 'float', 'datetime', 'timestamp', 'timestamp'],
  \ ],
  \ 'javascript': [
  \   ['const', 'let'],
  \   ['props', 'state'],
  \ ],
  \ 'git-rebase-todo': [
  \   ['pick', 'reword', 'edit', 'squash', 'fixup', 'exec'],
  \ ],
  \}
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'
on_cmd = ['SudoWrite', 'SudoRead']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap [fugitive] <Nop>
  nmap <C-g> [fugitive]
  nnoremap [fugitive]b :<C-u>Gblame<CR>
  nnoremap [fugitive]d :<C-u>Gdiff<CR>
  nnoremap [fugitive]g :<C-u>Ggrep<Space>
  nnoremap [fugitive]s :<C-u>Gstatus<CR>
  nnoremap [fugitive]w :<C-u>Gwrite<CR>
  nnoremap [fugitive]c :<C-u>Gcommit<CR>
'''

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tpope/vim-abolish'
depends = ['vim-repeat']

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
 repo = 'editorconfig/editorconfig-vim'

[[plugins]]
 repo = 'sbdchd/neoformat'
hook_add = '''
" let g:neoformat_javascript_prettiereslint = {
"  \ 'exe': './node_modules/.bin/prettier-eslint',
"  \ 'args': ['--stdin', '--stdin-filepath', '%:p'],
"  \ 'stdin': 1,
"  \ }
" let g:neoformat_enabled_javascript = ['prettiereslint']
let g:neoformat_enabled_javascript = ['eslint_d']

" let g:ale_completion_tsserver_autoimport = 0
map <silent><Leader><c-f> <C-u>:Neoformat<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'kana/vim-textobj-user'
